import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { createTelegramBot, type CarTycoonBot } from "./telegram-bot";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
let telegramBot: CarTycoonBot | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL WebApp
function getWebAppUrl(): string {
  const isDevelopment = app.get("env") === "development";
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Replit –¥–æ–º–µ–Ω (–≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –¥–ª—è Telegram)
  const replitDomain = process.env.REPLIT_DOMAINS || process.env.REPL_SLUG;
  if (replitDomain) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ–º–µ–Ω –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
    const domain = replitDomain.split(',')[0].trim();
    return `https://${domain}`;
  }
  
  // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º HTTPS –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
  const port = process.env.PORT || 5000;
  
  // –í Replit –¥–∞–∂–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —á–∞—Å—Ç–æ –¥–æ—Å—Ç—É–ø–µ–Ω HTTPS
  if (process.env.REPL_ID || process.env.REPLIT_ENVIRONMENT) {
    const replId = process.env.REPL_ID || 'unknown';
    const username = process.env.REPL_OWNER || 'user';
    return `https://${replId}-${username}.replit.app`;
  }
  
  // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å Telegram)
  return `http://localhost:${port}`;
}

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "‚Ä¶";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);

  // –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (botToken) {
    try {
      const webAppUrl = getWebAppUrl();
      telegramBot = createTelegramBot(botToken, webAppUrl);
      log(`ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! WebApp URL: ${webAppUrl}`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: ${error}`);
    }
  } else {
    log(`‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.`);
    log(`üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.`);
  }

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 5000
  // this serves both the API and the client.
  // It is the only port that is not firewalled.
  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
})();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { telegramBot };
