import TelegramBot from 'node-telegram-bot-api';

interface TelegramBotConfig {
  token: string;
  webAppUrl: string;
}

export class CarTycoonBot {
  private bot: TelegramBot;
  private webAppUrl: string;

  constructor(config: TelegramBotConfig) {
    this.bot = new TelegramBot(config.token, { polling: true });
    this.webAppUrl = config.webAppUrl;
    this.setupCommands();
    this.setupHandlers();
  }

  private setupCommands() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    this.bot.setMyCommands([
      { command: 'start', description: 'üöó –ó–∞–ø—É—Å—Ç–∏—Ç—å Car Tycoon –∏–≥—Ä—É' },
      { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ' },
      { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞' }
    ]);
  }

  private setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const firstName = msg.from?.first_name || '–ò–≥—Ä–æ–∫';
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL HTTPS –¥–ª—è WebApp
        const isHttps = this.webAppUrl.startsWith('https://');
        
        let keyboard;
        let message = `üéÆ –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n` +
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Car Tycoon** ‚Äî —Å–∞–º—É—é –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –∏–≥—Ä—É –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—É—é –∏–º–ø–µ—Ä–∏—é!\n\n` +
          `üöó –ö–ª–∏–∫–∞–π, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã\n` +
          `üè≠ –ü–æ–∫—É–ø–∞–π –∏ —É–ª—É—á—à–∞–π –∑–∞–≤–æ–¥—ã\n` +
          `üí∞ –°—Ç—Ä–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—É—é –∏–º–ø–µ—Ä–∏—é\n\n`;

        if (isHttps) {
          keyboard = {
            inline_keyboard: [[
              {
                text: 'üöó –ò–≥—Ä–∞—Ç—å –≤ Car Tycoon',
                web_app: { url: this.webAppUrl }
              }
            ]]
          };
          message += `–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!`;
        } else {
          keyboard = {
            inline_keyboard: [[
              {
                text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                url: this.webAppUrl
              }
            ]]
          };
          message += `–û—Ç–∫—Ä–æ–π –∏–≥—Ä—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n${this.webAppUrl}`;
        }

        await this.bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        await this.bot.sendMessage(chatId,
          `üéÆ –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n` +
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Car Tycoon!\n\n` +
          `–ò–≥—Ä–∞: ${this.webAppUrl}\n\n` +
          `–ö–æ–º–∞–Ω–¥—ã: /help /stats`
        );
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      
      try {
        const isHttps = this.webAppUrl.startsWith('https://');
        let keyboard;

        if (isHttps) {
          keyboard = {
            inline_keyboard: [[
              {
                text: 'üöó –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å',
                web_app: { url: this.webAppUrl }
              }
            ]]
          };
        } else {
          keyboard = {
            inline_keyboard: [[
              {
                text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                url: this.webAppUrl
              }
            ]]
          };
        }

        await this.bot.sendMessage(chatId,
          `üéÆ **Car Tycoon - –ü–æ–º–æ—â—å**\n\n` +
          `üéØ **–¶–µ–ª—å –∏–≥—Ä—ã:**\n` +
          `–ü–æ—Å—Ç—Ä–æ–π —Å–∞–º—É—é –±–æ–ª—å—à—É—é –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—É—é –∏–º–ø–µ—Ä–∏—é!\n\n` +
          `üé≤ **–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**\n` +
          `‚Ä¢ –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã"\n` +
          `‚Ä¢ –ü–æ–∫—É–ø–∞–π –∞–≤—Ç–æ–∑–∞–≤–æ–¥—ã –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n` +
          `‚Ä¢ –£–ª—É—á—à–∞–π –º–∞—à–∏–Ω—ã –∏ –∑–∞–≤–æ–¥—ã\n` +
          `‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n` +
          `üí° **–°–æ–≤–µ—Ç—ã:**\n` +
          `‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –∫–ª–∏–∫–æ–≤ - —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç\n` +
          `‚Ä¢ –ó–∞–≤–æ–¥—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –º–æ–Ω–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n` +
          `‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏\n\n` +
          `–£–¥–∞—á–∏ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏–º–ø–µ—Ä–∏–∏! üèÜ`,
          {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help:', error);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats
    this.bot.onText(/\/stats/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      
      try {
        const isHttps = this.webAppUrl.startsWith('https://');
        let keyboard;

        if (isHttps) {
          keyboard = {
            inline_keyboard: [[
              {
                text: 'üöó –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                web_app: { url: this.webAppUrl }
              }
            ]]
          };
        } else {
          keyboard = {
            inline_keyboard: [[
              {
                text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                url: this.webAppUrl
              }
            ]]
          };
        }

        await this.bot.sendMessage(chatId,
          `üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Car Tycoon**\n\n` +
          `üë§ ID –∏–≥—Ä–æ–∫–∞: \`${userId}\`\n` +
          `üéÆ –ò–≥—Ä–∞: Car Tycoon\n` +
          `üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram WebApp\n\n` +
          `–û—Ç–∫—Ä–æ–π –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!`,
          {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
    this.bot.on('web_app_data', (msg) => {
      const chatId = msg.chat.id;
      const data = msg.web_app_data?.data;
      
      try {
        const gameData = JSON.parse(data || '{}');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–≥—Ä—ã
        if (gameData.action === 'save_progress') {
          this.bot.sendMessage(chatId, 
            `üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n` +
            `üí∞ –ú–æ–Ω–µ—Ç—ã: ${gameData.coins || 0}\n` +
            `üñ±Ô∏è –ö–ª–∏–∫–æ–≤: ${gameData.totalClicks || 0}`
          );
        } else if (gameData.action === 'achievement') {
          this.bot.sendMessage(chatId,
            `üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n\n` +
            `${gameData.achievement || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'}`
          );
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebApp:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      const text = msg.text;
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –¥–∞–Ω–Ω—ã–µ WebApp
      if (text?.startsWith('/') || msg.web_app_data) {
        return;
      }

      try {
        const isHttps = this.webAppUrl.startsWith('https://');
        let keyboard;

        if (isHttps) {
          keyboard = {
            inline_keyboard: [[
              {
                text: 'üöó –ò–≥—Ä–∞—Ç—å –≤ Car Tycoon',
                web_app: { url: this.webAppUrl }
              }
            ]]
          };
        } else {
          keyboard = {
            inline_keyboard: [[
              {
                text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                url: this.webAppUrl
              }
            ]]
          };
        }

        await this.bot.sendMessage(chatId,
          `üéÆ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏–≥—Ä—ã Car Tycoon.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n` +
          `/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n` +
          `/help - –ü–æ–º–æ—â—å\n` +
          `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
          `–ò–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–π –∏–≥—Ä—É!`,
          { reply_markup: keyboard }
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞–º
  public async sendNotification(chatId: number, message: string) {
    try {
      await this.bot.sendMessage(chatId, message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  public async getUserInfo(userId: number) {
    try {
      return await this.bot.getChat(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
      return null;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
export function createTelegramBot(token: string, webAppUrl: string): CarTycoonBot {
  return new CarTycoonBot({ token, webAppUrl });
}